rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && 
             timestamp <= request.time;
    }
    
    function isValidString(str, maxLength) {
      return str is string && 
             str.size() > 0 && 
             str.size() <= maxLength;
    }
    
    function isValidNumber(num, min, max) {
      return num is number && 
             num >= min && 
             num <= max;
    }
    
    // App configuration - read-only for authenticated users
    match /app_config/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write (handled server-side)
    }
    
    // User documents and subcollections
    match /users/{userId} {
      // User can only access their own data
      allow read, write: if isOwner(userId);
      
      // User profile data
      match /profile/{document} {
        allow read, write: if isOwner(userId);
        
        // Validate user data
        allow create, update: if isOwner(userId) && 
          isValidString(resource.data.displayName, 100) &&
          isValidString(resource.data.email, 100) &&
          isValidTimestamp(resource.data.createdAt) &&
          isValidTimestamp(resource.data.lastUpdated);
      }
      
      // Food entries
      match /entries/{entryId} {
        allow read, write: if isOwner(userId);
        
        // Validate food entry data
        allow create, update: if isOwner(userId) &&
          isValidString(resource.data.foodName, 200) &&
          isValidNumber(resource.data.calories, 0, 10000) &&
          isValidNumber(resource.data.quantity, 0, 10000) &&
          isValidTimestamp(resource.data.timestamp) &&
          isValidTimestamp(resource.data.createdAt);
      }
      
      // Daily summaries
      match /dailySummaries/{dateKey} {
        allow read, write: if isOwner(userId);
        
        // Validate daily summary data
        allow create, update: if isOwner(userId) &&
          isValidString(resource.data.dateKey, 20) &&
          isValidNumber(resource.data.caloriesConsumed, 0, 50000) &&
          isValidNumber(resource.data.caloriesBurned, 0, 10000) &&
          isValidNumber(resource.data.steps, 0, 100000) &&
          isValidTimestamp(resource.data.date);
      }
      
      // User goals
      match /goals/{document} {
        allow read, write: if isOwner(userId);
        
        // Validate goals data
        allow create, update: if isOwner(userId) &&
          isValidNumber(resource.data.calorieGoal, 500, 10000) &&
          isValidNumber(resource.data.waterGlassesGoal, 1, 50) &&
          isValidNumber(resource.data.stepsPerDayGoal, 1000, 100000) &&
          isValidTimestamp(resource.data.createdAt);
      }
      
      // Achievements
      match /achievements/{achievementId} {
        allow read, write: if isOwner(userId);
        
        // Validate achievement data
        allow create, update: if isOwner(userId) &&
          isValidString(resource.data.title, 100) &&
          isValidString(resource.data.description, 500) &&
          isValidNumber(resource.data.points, 0, 10000) &&
          isValidTimestamp(resource.data.unlockedAt);
      }
      
      // Streaks
      match /streaks/{document} {
        allow read, write: if isOwner(userId);
        
        // Validate streak data
        allow create, update: if isOwner(userId) &&
          isValidNumber(resource.data.totalActiveStreaks, 0, 100) &&
          isValidNumber(resource.data.longestOverallStreak, 0, 10000) &&
          isValidTimestamp(resource.data.lastActivityDate);
      }
      
      // Trainer chats
      match /trainerChats/{sessionId} {
        allow read, write: if isOwner(userId);
        
        // Validate chat data
        allow create, update: if isOwner(userId) &&
          isValidString(resource.data.title, 200) &&
          isValidString(resource.data.userId, 100) &&
          isValidTimestamp(resource.data.timestamp);
      }
      
      // Health data
      match /healthData/{dateKey} {
        allow read, write: if isOwner(userId);
        
        // Validate health data
        allow create, update: if isOwner(userId) &&
          isValidString(resource.data.dateKey, 20) &&
          isValidNumber(resource.data.steps, 0, 100000) &&
          isValidNumber(resource.data.caloriesBurned, 0, 10000) &&
          isValidTimestamp(resource.data.date);
      }
      
      // Analytics
      match /analytics/{period} {
        allow read, write: if isOwner(userId);
        
        // Validate analytics data
        allow create, update: if isOwner(userId) &&
          isValidString(resource.data.period, 20) &&
          isValidTimestamp(resource.data.startDate) &&
          isValidTimestamp(resource.data.endDate);
      }
    }
    
    // Public data (if any)
    match /public/{document} {
      allow read: if true;
      allow write: if false; // Only admins can write
    }
    
    // Admin collections (server-side only)
    match /admin/{document=**} {
      allow read, write: if false;
    }
    
    // System collections (server-side only)
    match /system/{document=**} {
      allow read, write: if false;
    }
  }
}
